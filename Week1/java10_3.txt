

-------------------------------------------------------10/03

Khai báo mảng: 
	int [] numbers = new int[5];		// khởi tạo 1 mảng gồm 5 phần tử với giá trị mặt định là 0
	int[] numbers = {1, 7, 5, 1}; 		// khai báo nhanh 1 mảng
	Độ dài mảng, numbers[i]


Bài tập 
BT1: Tính tổng các giá trị trong mảng
BT2: Đếm xem mảng có bao nhiêu số chẵn
BT3: Tìm giá trị nhỏ nhất của mảng
BT4: Thêm phần tử vào mảng
BT5: Xóa phần tử khỏi mảng
BT6: Gộp 2 mảng a, b lại với nhau
Bài tập vòng lặp ai chưa làm thì làm bù

Các kiểu dữ liệu mặc định trong Java: boolean; char; byte; short; int; long; float; double.

Đọc bài trước, note lại và demo:
https://viettuts.vn/java/lop-wrapper-trong-java
Lớp Wrapper trong java:
- Cung cấp cơ chế để chuyển đổi kiểu dữ liệu nguyên thủy thành kiểu đối tượng và từ đối tượng thành kiểu dữ liệu nguyên thủy.
- Trong Java có 8 lớp Wrapper được thiết kế trong gói java.lang. Với Kiểu nguyên thủy - Kiểu Wrapper:
boolean-Boolean; char-Charater; byte-Byte; short-Short; int-Integer; long-Long; float-Float; double-Double.
- Ví dụ:
	+ Chuyển kiểu dữ liệu nguyên thủy thành kiểu Wrapper:
 public class WrapperExample1 {
    public static void main(String args[]) {
        // Đổi int thành Integer
        int a = 20;
        Integer i = Integer.valueOf(a);// đổi int thành Integer
        Integer j = a;// autoboxing, tự động đổi int thành Integer trong nội bộ trình biên dịch
 
        System.out.println(a + " " + i + " " + j);
    }
}

	+ Chuyển ngược lại( Wrapper - kiểu nguyên thủy):
public class WrapperExample2 {
    public static void main(String args[]) {
        // đổi Integer thành int
        Integer a = new Integer(3);
        int i = a.intValue();// đổi Integer thành int
        int j = a;// unboxing, tự động đổi Integer thành int trong nội bộ trình biên dịch
 
        System.out.println(a + " " + i + " " + j);
    }
}


Kiểu tham chiếu và tham trị trong Java
https://gochocit.com/ngon-ngu-lap-trinh/truyen-tham-tri-va-tham-chieu-cho-phuong-thuc-trong-java
- Tham số của phương thức là những biến được khai báo trong khai báo phương thức. Tham số đóng vai trò là giá trị đầu vào cho phương thức.
- Truyền tham trị trong Java: Gọi một phương thức và truyền một giá trị cho phương thức. Việc thay đổi giá trị chỉ có hiệu lực trong phương thức được gọi, không có hiệu lực bên ngoài phương thức.
Truyền tham trị dành cho các tham số có kiểu dữ liệu nguyên thủy là byte, short, int, long, float, double, boolean, char.
- Truyền tham chiếu trong Java: Gọi một phương thức và truyền một tham chiếu cho phương thức. Việc thay đổi giá trị của biến tham chiếu bên trong phương thức làm thay đổi giá trị của nó.
Tất các phương thức có tham số là biến có kiểu là các lớp (class) đều là kiểu tham chiếu.



-------------------------------------------------------13/03

// Scanner dùng để nhập thông tin
public static Scanner scanner = new Scanner(System.in);

// In có xuống dòng
System.out.println();

// Lớp Arrays có phương thức toString dùng để chuyển 1 mảng thành chuỗi
Arrays.toString(a)

// In có format
System.out.printf("%s xin chao", "C1222I1");

//Sao chép 1 mảng gốc thành 1 mảng mới theo 1 độ dài cho trước
Arrays.copyOf(a, a.length + 1);

-------------------------------------------------------14/03

Đọc thêm và notes:
Print format trong java
https://niithanoi.edu.vn/printf-trong-java.html

Trong khi Print và Println chỉ làm một nhiệm vụ duy nhất là in ra màn hình,
Printf thì lại khác, vừa in được ra màn hình, vừa định dạng được những thứ mà nó đã in ra – từ chuỗi đến số, ngày giờ và cả đối tượng.
- Với Print: Xuất kết quả ra màn hình nhưng con trỏ chuột không xuống dòng.
Vd: public class Print {
        public static void main(String[] args) {
            System.out.print("Tôi yêu lập trình.");
            System.out.print("Thích Java và uống cafe.");
        }
    }
- Với Println: Xuất kết quả ra màn hình đồng thời con trỏ chuột nhảy xuống dòng tiếp theo.
Vd: public class Print {
        public static void main(String[] args) {
            System.out.println("Tôi yêu lập trình.");
            System.out.println("Thích Java và uống cafe.");
        }
    }
- Với Printf: Xuất ra màng hình kết quả đồng thời có thể định dạng được kết quả đó nhờ vào các đối số thích hợp.
Vd: public class Printf {
        public static void main(String[] args) {
            System.out.printf("%s\n%s", "Tôi yêu lập trình.", "Thích Java và uống cafe.");
        }
    }
- Các bộ định dạng có sẵn trong Printf:
%c: Ký tự
%d: Số thập phân (số nguyên) (cơ số 10)
%e: Dấu phẩy động theo cấp số nhân
%f: Dấu phẩy động
%i: Số nguyên (cơ sở 10)
%o: Số bát phân (cơ sở 8)
%s: Chuỗi
%u: Số thập phân (số nguyên) không dấu
%x: Số trong hệ thập lục phân (cơ sở 16)
%t: Định dạng ngày / giờ
%%: Dấu phần trăm
\%: Dấu phần trăm

Xem trước: OOP
https://www.youtube.com/watch?v=tcGNKqhu3GE
- Từ khóa class, từ khóa new:
+ Lớp là đơn vị thực thi cơ bản trong ngôn ngữ Java
• Lớp quy định hình thức và các khả năng của các đối tượng
• Khai báo lớp đồng thời cũng là khai báo một kiểu dữ liệu mới để có thể khởi tạo các đối tượng thuộc kiểu dữ liệu đó
Vd: public class Person {
    // Hàm tạo đối tượng của lớp
    public Person() {
    // Khởi tạo đối tượng:
    }
}
+ Có thể khởi tạo đối tượng của một lớp sau khi lớp đó được khai báo. Sử dụng từ khoá new để khởi tạo đối tượng.
Cú pháp: <class_name> <object_name> = new <class_name> ();
Vd: Person personObj = newPerson();
- Thuộc tính, phương thức là gì:
+ Các thuộc tính mô tả các đặc điểm của đối tượng. Thuộc tính còn được gọi là instancevariable (biến của đối tượng )
+ Phương thức mô tả các hành vi mà đối tượng có thể thực hiện. Phương thức còn được gọi là instancemethod(phương thức của đối tượng )
- Phương thức khởi tạo:
+ Constructor là một phương thức đặc biệt giúp khởi tạo đối tượng
• Constructor có tên trùng với tên của lớp
• Một lớp có thể có nhiều constructor
• Nếu không khai báo constructor cho lớp thì mặc định lớp đó có một constructor không có tham số
Vd: public Person(String s, int n) {
    name = s;
    age = n;
    }
    ----->   personObj = new Person("John", 20);

-------------------------------------------------------15/3

