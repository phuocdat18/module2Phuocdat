-------------------------------------------------------13/03

// Scanner dùng để nhập thông tin
public static Scanner scanner = new Scanner(System.in);

// In có xuống dòng
System.out.println();

// Lớp Arrays có phương thức toString dùng để chuyển 1 mảng thành chuỗi
Arrays.toString(a)

// In có format
System.out.printf("%s xin chao", "C1222I1");

//Sao chép 1 mảng gốc thành 1 mảng mới theo 1 độ dài cho trước
Arrays.copyOf(a, a.length + 1);

-------------------------------------------------------14/03

Đọc thêm và notes:
Print format trong java
https://niithanoi.edu.vn/printf-trong-java.html

Trong khi Print và Println chỉ làm một nhiệm vụ duy nhất là in ra màn hình,
Printf thì lại khác, vừa in được ra màn hình, vừa định dạng được những thứ mà nó đã in ra – từ chuỗi đến số, ngày giờ và cả đối tượng.
- Với Print: Xuất kết quả ra màn hình nhưng con trỏ chuột không xuống dòng.
Vd: public class Print {
        public static void main(String[] args) {
            System.out.print("Tôi yêu lập trình.");
            System.out.print("Thích Java và uống cafe.");
        }
    }
- Với Println: Xuất kết quả ra màn hình đồng thời con trỏ chuột nhảy xuống dòng tiếp theo.
Vd: public class Print {
        public static void main(String[] args) {
            System.out.println("Tôi yêu lập trình.");
            System.out.println("Thích Java và uống cafe.");
        }
    }
- Với Printf: Xuất ra màng hình kết quả đồng thời có thể định dạng được kết quả đó nhờ vào các đối số thích hợp.
Vd: public class Printf {
        public static void main(String[] args) {
            System.out.printf("%s\n%s", "Tôi yêu lập trình.", "Thích Java và uống cafe.");
        }
    }
- Các bộ định dạng có sẵn trong Printf:
%c: Ký tự
%d: Số thập phân (số nguyên) (cơ số 10)
%e: Dấu phẩy động theo cấp số nhân
%f: Dấu phẩy động
%i: Số nguyên (cơ sở 10)
%o: Số bát phân (cơ sở 8)
%s: Chuỗi
%u: Số thập phân (số nguyên) không dấu
%x: Số trong hệ thập lục phân (cơ sở 16)
%t: Định dạng ngày / giờ
%%: Dấu phần trăm
\%: Dấu phần trăm

Xem trước: OOP
https://www.youtube.com/watch?v=tcGNKqhu3GE
- Từ khóa class, từ khóa new:
+ Lớp là đơn vị thực thi cơ bản trong ngôn ngữ Java
• Lớp quy định hình thức và các khả năng của các đối tượng
• Khai báo lớp đồng thời cũng là khai báo một kiểu dữ liệu mới để có thể khởi tạo các đối tượng thuộc kiểu dữ liệu đó
Vd: public class Person {
    // Hàm tạo đối tượng của lớp
    public Person() {
    // Khởi tạo đối tượng:
    }
}
+ Có thể khởi tạo đối tượng của một lớp sau khi lớp đó được khai báo. Sử dụng từ khoá new để khởi tạo đối tượng.
Cú pháp: <class_name> <object_name> = new <class_name> ();
Vd: Person personObj = newPerson();
- Thuộc tính, phương thức là gì:
+ Các thuộc tính mô tả các đặc điểm của đối tượng. Thuộc tính còn được gọi là instancevariable (biến của đối tượng )
+ Phương thức mô tả các hành vi mà đối tượng có thể thực hiện. Phương thức còn được gọi là instancemethod(phương thức của đối tượng )
- Phương thức khởi tạo:
+ Constructor là một phương thức đặc biệt giúp khởi tạo đối tượng
• Constructor có tên trùng với tên của lớp
• Một lớp có thể có nhiều constructor
• Nếu không khai báo constructor cho lớp thì mặc định lớp đó có một constructor không có tham số
Vd: public Person(String s, int n) {
    name = s;
    age = n;
    }
    ----->   personObj = new Person("John", 20);

- Cách truy xuất các thuộc tính, phương thức:
+ Có thể truy xuất các thành phần của đối tượng thông qua biến trỏ đến đối tượng.
Sử dụng dấu chấm (.) để truy xuất thuộc tính của đối tượng.
Vd: Person personObj;
    personObj = new Person("John",20);
    System.out.println("Myname is: " + personObj.name);
    System.out.println("My age is: "+ personObj.age);
+ Sử dụng dấu chấm (.) để gọi phương thức của đối tượng.
Vd: Person personObj;
    personObj = newPerson();
    String greeting = personObj.sayHello();
- getter, setter:
+ getter cú pháp: public returnTypegetPropertyName()
Đối với các thuộc tính kiểu boolean thì tên getter bắt đầu bằng chữ is: public boolean isPropertyName()
+ setter cú pháp: public void setPropertyName(dataType propertyValue)
+Vd: class Person{
    private Stringname;
    public void setName(String name){
    this.name = name;
    }
    public String getName(){
    return this.name;
    }
}





