-------------------------------------------------------17/03
+ Vì sao trong Java không cho đa kế thừa
+ Lớp abstract là gì, phương thức abstract là gì. Khi nào sử dụng lớp abstract
+ Các tính chất của lớp abstract
+ Interface là gì
+ Các tính chất của interface
+ Khi nào dùng abstrac khi nào dùng interface

- Vì sao trong Java không cho đa kế thừa:
Trong Java, không cho phép đa kế thừa vì việc sử dụng đa kế thừa có thể dẫn đến các vấn đề xung đột về tính nhất quán của lớp. Thay vào đó sử dụng khái niệm "implements" để kế thừa các tính năng từ các interface khác nhau. Một lớp có thể implements nhiều interface, nhưng chỉ có thể kế thừa từ một lớp cha duy nhất. Việc này giúp đảm bảo tính nhất quán trong việc triển khai phương thức và tránh các xung đột xảy ra.

- Lớp abstract là gì, phương thức abstract là gì. Khi nào sử dụng lớp abstract:
+ Lớp abstract trong lập trình hướng đối tượng là một lớp mà không thể được khởi tạo trực tiếp, mà chỉ có thể được kế thừa bởi các lớp con và các phương thức abstract trong lớp abstract là các phương thức mà không có định nghĩa cụ thể. Thay vào đó, các phương thức abstract cần phải được khai báo trong lớp abstract và phải được định nghĩa trong các lớp con.
+ Lớp abstract được sử dụng để xác định một giao diện chung cho các lớp con. Nó cho phép các lớp con triển khai các phương thức của lớp cha một cách khác nhau để phù hợp với nhu cầu của từng lớp con cụ thể. Việc sử dụng lớp abstract giúp giảm sự phức tạp của mã và giúp tăng tính linh hoạt của hệ thống.
+ Phương thức abstract trong lớp abstract là phương thức mà không có thân hàm, nghĩa là không có định nghĩa cụ thể cho phương thức. Nó chỉ cung cấp một khung chung cho phương thức và được định nghĩa trong các lớp con để triển khai theo cách tốt nhất cho mỗi lớp con.

- Các tính chất của lớp abstract: 
+ Không thể khởi tạo trực tiếp: Lớp abstract không thể được khởi tạo trực tiếp, mà chỉ có thể được kế thừa bởi các lớp con.
+ Có thể có các phương thức abstract: Lớp abstract có thể chứa các phương thức abstract, các phương thức này không có định nghĩa cụ thể và phải được triển khai trong các lớp con.
+ Có thể có các phương thức không abstract: Lớp abstract cũng có thể chứa các phương thức không abstract, các phương thức này có định nghĩa cụ thể và có thể được sử dụng bởi các lớp con.
+ Có thể có các biến thành viên: Lớp abstract có thể chứa các biến thành viên, các biến này có thể được sử dụng bởi các lớp con.
+ Không thể tạo đối tượng: Lớp abstract không thể được sử dụng để tạo đối tượng, mà chỉ có thể được sử dụng để tạo các lớp con.
+ Phải được kế thừa: Lớp abstract phải được kế thừa bởi các lớp con, nếu không sẽ xảy ra lỗi biên dịch.
+ Có thể có các phương thức final hoặc static: Lớp abstract có thể có các phương thức final hoặc static, tuy nhiên các phương thức này không thể là abstract.

- Interface là gì:
+ Trong lập trình hướng đối tượng, Interface là một tập hợp các phương thức trừu tượng (abstract methods) mà không có bất kỳ định nghĩa cụ thể nào cho các phương thức đó. Nó chỉ định một giao diện (interface) và các phương thức cần được triển khai trong các lớp khác.
+ Một Interface tương tự như một lớp abstract, tuy nhiên nó chỉ chứa các phương thức abstract và các hằng số. Các phương thức abstract được khai báo trong Interface không có thân hàm (implementation) và các lớp khác cần phải cung cấp các triển khai cho các phương thức này.
+ Một Interface có thể được kế thừa bởi một lớp hoặc một Interface khác. Nếu một lớp triển khai một Interface, nó cần cung cấp triển khai cho tất cả các phương thức abstract của Interface đó.

- Các tính chất của interface:
+ Các phương thức chỉ được khai báo mà không có định nghĩa cụ thể.
+ Các phương thức trong Interface mặc định là public và abstract.
+ Interface không thể được khởi tạo và không thể chứa bất kỳ constructor nào.
+ Một lớp có thể triển khai nhiều Interface.
+ Interface có thể kế thừa từ nhiều Interface khác.
+ Interface có thể chứa các hằng số (constants).
+ Các phương thức trong Interface có thể có các tham số đầu vào và giá trị trả về.




VD: 1 lớp chỉ có thể kết thừa từ 1 lớp cha duy nhất:
class Animal {
    public void eat() {
        System.out.println("Animal is eating...");
    }
}

class Dog extends Animal {
    public void bark() {
        System.out.println("Dog is barking...");
    }
}

class Bird extends Animal {
    public void fly() {
        System.out.println("Bird is flying...");
    }
}

class DogBird extends Dog, Bird { // Lỗi biên dịch: không cho phép đa kế thừa giữa lớp
    // ...
}


Vd: Các lớp có thể kế thừa từ nhiều interface khác nhau:
interface Animal {
    public void eat();
}

interface Dog {
    public void bark();
}

interface Bird {
    public void fly();
}

class DogBird implements Dog, Bird {
    public void bark() {
        System.out.println("Dog is barking...");
    }

    public void fly() {
        System.out.println("Bird is flying...");
    }
}
